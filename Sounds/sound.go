package Sounds

import (
	"embed"
	"github.com/faiface/beep"
	"github.com/faiface/beep/mp3"
	"github.com/faiface/beep/speaker"
	"github.com/faiface/beep/wav"
	"log"
	"time"
)

//go:embed resource
var file embed.FS

type Sound struct {
}

func (s *Sound) SayHello() {
	open, err := file.Open("resource/hello.mp3")
	if err != nil {
		log.Panic(err)
	}

	streamer, format, err := mp3.Decode(open)
	if err != nil {
		log.Panic(err)
	}

	defer streamer.Close()

	speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	done := make(chan bool)
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	<-done
}

func (s *Sound) SayLogin() {
	open, err := file.Open("resource/Login.wav")
	if err != nil {
		log.Panic(err)
	}

	streamer, format, err := wav.Decode(open)
	if err != nil {
		log.Panic(err)
	}

	defer streamer.Close()

	speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	done := make(chan bool)
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	<-done
}

func (s *Sound) SayOffline() {
	open, err := file.Open("resource/Offline.wav")
	if err != nil {
		log.Panic(err)
	}

	streamer, format, err := wav.Decode(open)
	if err != nil {
		log.Panic(err)
	}

	defer streamer.Close()

	speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
	done := make(chan bool)
	speaker.Play(beep.Seq(streamer, beep.Callback(func() {
		done <- true
	})))

	<-done
}
