package Gui

import (
	"bufio"
	"embed"
	"fmt"
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/cmd/fyne_settings/settings"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/fyne-io/terminal"
	"github.com/imroc/req/v3"
	"github.com/xuri/excelize/v2"
	"goexploits/Automation"
	"goexploits/Cms"
	"goexploits/Information"
	"goexploits/Middleware"
	"goexploits/NetworkEquipment"
	"goexploits/OA"
	"goexploits/Proxy"
	"goexploits/Sounds"
	"goexploits/System"
	"image/color"
	_ "io/ioutil"
	"net/url"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"time"
)

type App struct {
	System.System                                // 权限
	Automation.Automation                        // 自动化系列
	Middleware.Middleware                        // 中间件系列
	NetworkEquipment.NetworkEquipment            // 网络设备系列
	OA.OA                                        // OA系列
	Cms.Cms                                      // cms系列
	Information.Information                      // 信息收集
	Sounds.Sound                                 // 提示音类
	Proxy.Proxy                                  // 继承 代理类
	a                                            fyne.App
	w                                            fyne.Window
	TempString                                   string                      // 临时文本
	AddrEntry                                    *widget.Entry               // 目标地址
	InformationAddrEntry                         *widget.Entry               // 信息收目标地址输入框
	TimeOutEntry                                 *widget.Entry               // 超时设置
	ThreadEntry                                  *widget.Entry               // 线程设置
	CmsProductSelectionMenu                      *widget.Select              // cms支持产品选择框
	CmsVulnerabilitiesSelectionMenu              *widget.Select              // cms漏洞选择框
	OAProductSelectionMenu                       *widget.Select              // OA支持产品选择框
	OAVulnerabilitiesSelectionMenu               *widget.Select              // OA漏洞选择框
	MiddlewareProductSelectionMenu               *widget.Select              // 中间件支持产品选择框
	MiddlewareVulnerabilitiesSelectionMenu       *widget.Select              // 中间件漏洞选择框
	NetworkEquipmentProductSelectionMenu         *widget.Select              // 网络设备支持产品选择框
	NetworkEquipmentVulnerabilitiesSelectionMenu *widget.Select              // 网络设备漏洞选择框
	AutomationProductSelectionMenu               *widget.Select              // 自动化支持产品选择框
	AutomationVulnerabilitiesSelectionMenu       *widget.Select              // 自动化漏洞选择框
	MiddlewareResultMultiLineEntry               *widget.Entry               // 中间件结果显示输入框
	InformationResultMultiLineEntry              *widget.Entry               // Information结果显示输入框
	InformationResultTable                       *widget.Table               // Information结果显示表格
	InformationData                              [][]string                  // Information数据
	InformationResultChan                        chan [][]string             // Information类 数据管道
	InformationTableIndex                        int                         // Information序号
	CmsResultMultiLineEntry                      *widget.Entry               // cms结果显示输入框
	OAResultMultiLineEntry                       *widget.Entry               // oa结果显示输入框
	NetworkEquipmentMultiLineEntry               *widget.Entry               // 网络设备结果显示输入框
	AutomationMultiLineEntry                     *widget.Entry               // 自动化结果显示输入框
	UtilizationModeEntry                         *widget.Entry               // 利用方式输入框
	DnsLogAddrEntry                              *widget.Entry               // DnsLog地址输入框
	CmsProgressBarInfinite                       *widget.ProgressBarInfinite // cms进度条
	OAProgressBarInfinite                        *widget.ProgressBarInfinite // oa进度条
	InformationProgressBarInfinite               *widget.ProgressBarInfinite // information进度条
	MiddlewareProgressBarInfinite                *widget.ProgressBarInfinite // 中间件进度条
	NetworkEquipmentProgressBarInfinite          *widget.ProgressBarInfinite // 网络设备进度条
	AutomationProgressBarInfinite                *widget.ProgressBarInfinite // 自动化进度条
	CmsStartButton                               *widget.Button              // cms开始按钮
	CmsStopButton                                *widget.Button              // cms结束按钮
	OAStartButton                                *widget.Button              // OA开始按钮
	OAStopButton                                 *widget.Button              // OA结束按钮
	InformationStartButton                       *widget.Button              // information开始按钮
	InformationStopButton                        *widget.Button              // information结束按钮
	MiddlewareStartButton                        *widget.Button              // 中间件开始按钮
	MiddlewareStopButton                         *widget.Button              // 中间件结束按钮
	NetworkEquipmentStartButton                  *widget.Button              // 网络设备开始按钮
	NetworkEquipmentStopButton                   *widget.Button              // 网络设备结束按钮
	AutomationStartButton                        *widget.Button              // 自动化开始按钮
	AutomationStopButton                         *widget.Button              // 自动化结束按钮
	ResultExportButton                           *widget.Button              // 结果导出按钮
}

// 资源打包区域

//go:embed static
var StaticFile embed.FS

// 返回背景图片
func (MyApp *App) ReturnResourceImage() *canvas.Image {
	file, _ := StaticFile.ReadFile("static/dark.jpg")
	return canvas.NewImageFromResource(fyne.NewStaticResource("BgImage", file))
}

// 窗口菜单定义区域
func (MyApp *App) ReturnSetMainMenu() *fyne.MainMenu {
	WindowsProxy := fyne.NewMenuItem("系统代理", func() {
		w := MyApp.a.NewWindow("系统代理设置")

		host := widget.NewEntry()
		port := widget.NewEntry()
		Flag := widget.NewLabel("")

		form := widget.NewForm(
			widget.NewFormItem("主机", host),
			widget.NewFormItem("端口", port),
			widget.NewFormItem("状态", Flag),
		)

		form.CancelText = "取消"
		form.SubmitText = "确认"

		form.OnCancel = func() {
			w.Close()
		}

		form.OnSubmit = func() {
			MyApp.Proxy.Host = host.Text
			MyApp.Proxy.Port = port.Text
			err := MyApp.Proxy.SetWindowsProxy(fmt.Sprintf("%s:%s", MyApp.Proxy.Host, MyApp.Proxy.Port))
			if err != nil {
				Flag.SetText("设置异常")
				MyApp.ShowError(w, err)
				return
			} else {
				Flag.SetText("设置成功")
			}
		}
		w.SetContent(container.NewCenter(container.NewVBox(form)))
		w.Resize(fyne.NewSize(320, 230))
		w.CenterOnScreen()
		w.Show()
	})

	RoutineProxy := fyne.NewMenuItem("常规代理", func() {
		w := MyApp.a.NewWindow("常规代理设置")

		newSelect := widget.NewSelect([]string{"HTTP"}, func(s string) {

		})

		newSelect.SetSelectedIndex(0)

		HttpUrl := widget.NewEntry()
		Flag := widget.NewLabel("")

		form := widget.NewForm(
			widget.NewFormItem("协议", newSelect),
			widget.NewFormItem("地址", HttpUrl),
			widget.NewFormItem("状态", Flag),
		)

		form.Items[0].HintText = "例:http://127.0.0.1:80"

		form.CancelText = "取消"
		form.SubmitText = "确认"

		form.OnCancel = func() {
			w.Close()
		}

		form.OnSubmit = func() {
			MyApp.Proxy.Url = HttpUrl.Text
			MyApp.Proxy.IsHttpProxy = true
			Flag.SetText("设置成功")
		}

		w.SetContent(container.NewCenter(container.NewVBox(form)))
		w.Resize(fyne.NewSize(320, 230))
		w.CenterOnScreen()
		w.Show()
	})

	SetProxy := fyne.NewMenuItem("代理", func() {

	})

	SetProxy.ChildMenu = fyne.NewMenu("", WindowsProxy, fyne.NewMenuItemSeparator(), RoutineProxy)

	SetBackGroundImage := fyne.NewMenuItem("背景", func() {
		OpenFile := dialog.NewFileOpen(func(closer fyne.URIReadCloser, err error) {
			if closer == nil || err != nil {
				return
			}
		}, MyApp.w)

		OpenFile.SetFilter(storage.NewExtensionFileFilter([]string{".jpg", ".jpeg", ".png", ".bmp"}))
		OpenFile.Resize(fyne.NewSize(1080, 720))
		OpenFile.Show()
	})

	individualization := fyne.NewMenuItem("个性化", func() {
		w := MyApp.a.NewWindow("个性化设置")
		w.SetContent(settings.NewSettings().LoadAppearanceScreen(w))
		w.CenterOnScreen()
		w.Show()
	})

	update := fyne.NewMenuItem("更新", func() {
		go func() {
			w := MyApp.a.NewWindow("更新检测")
			go func() {
				time.Sleep(time.Second * 3)
				resp, err := req.Get("https://www.github.com")
				if err != nil {
					w.SetContent(container.NewCenter(canvas.NewText("检查失败 网络错误...", color.RGBA{255, 0, 255, 0})))
					return
				}
				if resp.StatusCode == 200 {
					w.SetContent(container.NewCenter(canvas.NewText("检查到更新... 后续支持", color.RGBA{255, 0, 255, 0})))
					return
				} else {
					w.SetContent(container.NewCenter(canvas.NewText("暂无更新...", color.RGBA{255, 0, 255, 0})))
					return
				}
			}()
			w.SetContent(container.NewCenter(canvas.NewText("请稍后 正在检查更新...", color.RGBA{255, 0, 255, 0})))
			w.Resize(fyne.NewSize(300, 100))
			w.CenterOnScreen()
			w.Show()
		}()
	})

	// 免责声明
	Disclaimers := fyne.NewMenuItem("免责声明", func() {
		go func() {
			w := MyApp.a.NewWindow("免责声明")
			file, _ := StaticFile.ReadFile("static/免责声明.txt")
			w.SetContent(container.NewScroll(widget.NewLabel(string(file))))
			w.CenterOnScreen()
			w.Resize(fyne.NewSize(1080, 720))
			w.Show()
		}()
	})

	TeamOfficialWebsite := fyne.NewMenuItem("团队官网", func() {
		go func() {
			cmd := exec.Command("cmd", "/c", "start https://www.one-fox.cn/")
			err := cmd.Run()
			if err != nil {
				MyApp.ShowError(MyApp.w, err)
			}
		}()
	})

	BugFeedback := fyne.NewMenuItem("bug反馈", func() {
		go func() {
			w := MyApp.a.NewWindow("bug反馈")
			file, _ := StaticFile.ReadFile("static/wx.jpg")
			w.SetContent(canvas.NewImageFromResource(fyne.NewStaticResource("wx", file)))
			w.Resize(fyne.NewSize(650, 600))
			w.CenterOnScreen()
			w.Show()
		}()
	})

	//ProjectThanks := fyne.NewMenuItem("项目感谢", func() {
	//	w := MyApp.a.NewWindow("项目感谢")
	//	link1, _ := url.Parse("https://github.com/fyne-io/fyne")
	//	style := widget.NewHyperlinkWithStyle("Gui框架 -> https://github.com/fyne-io/fyne", link1, fyne.TextAlignCenter, fyne.TextStyle{Bold: true})
	//
	//	w.SetContent(container.NewVBox(style))
	//
	//	w.Resize(fyne.NewSize(600, 500))
	//	w.CenterOnScreen()
	//	w.Show()
	//})

	Advertising := fyne.NewMenuItem("强哥服务器", func() {
		w := MyApp.a.NewWindow("买服务器找强哥")

		text1 := canvas.NewText("One-Fox安全团队内部自用服务器", color.RGBA{255, 0, 255, 0})
		text2 := canvas.NewText("\t\t\t稳定可靠 自由输出", color.RGBA{255, 0, 255, 0})

		line, _ := url.Parse("https://ayunzhizuo.top/")
		style := widget.NewHyperlink("https://ayunzhizuo.top", line)
		w.SetContent(container.NewCenter(container.NewVBox(text1, text2, style)))
		w.Resize(fyne.NewSize(600, 500))
		w.CenterOnScreen()
		w.Show()
	})

	SettingMenu := fyne.NewMenu("设置", SetProxy, individualization, SetBackGroundImage)
	UpdateMenu := fyne.NewMenu("更新", update)
	About := fyne.NewMenu("关于", Disclaimers, TeamOfficialWebsite, BugFeedback)
	AdvertisingSpace := fyne.NewMenu("广告位", Advertising)

	return fyne.NewMainMenu(SettingMenu, UpdateMenu, About, AdvertisingSpace)
}

// 全局错误处理 显示错误
func (MyApp *App) ShowError(w fyne.Window, err error) {
	up := widget.NewPopUp(widget.NewLabel(err.Error()), w.Canvas())
	up.CreateRenderer()
	up.Show()
}

// 全局初始化 基本控件
func (MyApp *App) Init() {
	// 输入框 统一初始化
	MyApp.AddrEntry = widget.NewEntry()
	MyApp.InformationAddrEntry = widget.NewEntry()
	MyApp.InformationAddrEntry.SetPlaceHolder("test.com")
	MyApp.InformationAddrEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.InformationAddrEntry.Wrapping = fyne.TextWrapBreak
	MyApp.InformationAddrEntry.ActionItem = widget.NewButtonWithIcon("", theme.FileIcon(), func() {
		OpenFile := dialog.NewFileOpen(func(closer fyne.URIReadCloser, err error) {
			if err != nil {
				return
			}

			if closer == nil {
				return
			}

			file, err := os.Open(closer.URI().Path())
			defer file.Close()
			if err != nil {
				return
			}
			scanner := bufio.NewScanner(file)
			for scanner.Scan() {
				line := strings.TrimSpace(scanner.Text())
				fmt.Println(line)
			}
		}, MyApp.w)

		OpenFile.SetFilter(storage.NewExtensionFileFilter([]string{".txt"}))
		OpenFile.Resize(fyne.NewSize(1080, 720))
		OpenFile.Show()
	})

	MyApp.ThreadEntry = widget.NewEntry()
	MyApp.ThreadEntry.SetText("10")
	MyApp.ThreadEntry.Disable()
	MyApp.TimeOutEntry = widget.NewEntry()
	MyApp.TimeOutEntry.SetText("10")

	// 结果显示输入框 统一初始化
	// information类
	MyApp.InformationResultMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.InformationResultMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.InformationResultMultiLineEntry.SetMinRowsVisible(25)
	MyApp.InformationResultMultiLineEntry.Disable()

	// cms类
	MyApp.CmsResultMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.CmsResultMultiLineEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.CmsResultMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.CmsResultMultiLineEntry.SetMinRowsVisible(25)
	MyApp.CmsResultMultiLineEntry.Disable()

	// oa类
	MyApp.OAResultMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.OAResultMultiLineEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.OAResultMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.OAResultMultiLineEntry.SetMinRowsVisible(25)
	MyApp.OAResultMultiLineEntry.Disable()

	// 中间件类
	MyApp.MiddlewareResultMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.MiddlewareResultMultiLineEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.MiddlewareResultMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.MiddlewareResultMultiLineEntry.SetMinRowsVisible(25)
	MyApp.MiddlewareResultMultiLineEntry.Disable()

	// 网络设备类
	MyApp.NetworkEquipmentMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.NetworkEquipmentMultiLineEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.NetworkEquipmentMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.NetworkEquipmentMultiLineEntry.SetMinRowsVisible(25)
	MyApp.NetworkEquipmentMultiLineEntry.Disable()

	// 自动化类
	MyApp.AutomationMultiLineEntry = widget.NewMultiLineEntry()
	MyApp.AutomationMultiLineEntry.TextStyle = fyne.TextStyle{Bold: true}
	MyApp.AutomationMultiLineEntry.SetText("ExploitToolsGo")
	MyApp.AutomationMultiLineEntry.SetMinRowsVisible(25)
	MyApp.AutomationMultiLineEntry.Disable()

	// 选择框 统一初始化
	// cms类
	MyApp.CmsVulnerabilitiesSelectionMenu = widget.NewSelect([]string{""}, func(s string) {

	})

	MyApp.CmsProductSelectionMenu = widget.NewSelect(MyApp.Cms.NameInfoExploit(), func(s string) {
		switch s {
		case "ThinkPHP":
			MyApp.CmsVulnerabilitiesSelectionMenu.Options = MyApp.Cms.ThinkPHP.ExpListInfoExploit()
			MyApp.CmsVulnerabilitiesSelectionMenu.SetSelectedIndex(0)
			break
		case "WordPress":
			MyApp.CmsVulnerabilitiesSelectionMenu.Options = MyApp.Cms.WordPress.ExpListInfoExploit()
			MyApp.CmsVulnerabilitiesSelectionMenu.SetSelectedIndex(0)
			break
		case "EyouCms":
			MyApp.CmsVulnerabilitiesSelectionMenu.Options = MyApp.Cms.EyouCms.ExpListInfoExploit()
			MyApp.CmsVulnerabilitiesSelectionMenu.SetSelectedIndex(0)
			break
		case "禅道":
			MyApp.CmsVulnerabilitiesSelectionMenu.Options = MyApp.Cms.ChanDao.ExpListInfoExploit()
			MyApp.CmsVulnerabilitiesSelectionMenu.SetSelectedIndex(0)
		default:
			break
		}
	})

	MyApp.CmsProductSelectionMenu.SetSelectedIndex(0)

	// oa类
	MyApp.OAProductSelectionMenu = widget.NewSelect(MyApp.OA.NameInfoExploit(), func(s string) {

	})
	MyApp.OAProductSelectionMenu.SetSelectedIndex(0)

	MyApp.OAVulnerabilitiesSelectionMenu = widget.NewSelect(MyApp.OA.ExpListInfoExploit(), func(s string) {

	})

	MyApp.OAVulnerabilitiesSelectionMenu.SetSelectedIndex(0)

	// 中间件类
	MyApp.MiddlewareProductSelectionMenu = widget.NewSelect(MyApp.Middleware.NameInfoExploit(), func(s string) {
		switch s {
		case "Weblogic":
			MyApp.MiddlewareVulnerabilitiesSelectionMenu.Options = MyApp.Middleware.Weblogic.ExpListInfoExploit()
			MyApp.MiddlewareVulnerabilitiesSelectionMenu.SetSelectedIndex(0)
			break
		default:
			break
		}
	})
	MyApp.MiddlewareProductSelectionMenu.SetSelectedIndex(0)

	MyApp.MiddlewareVulnerabilitiesSelectionMenu = widget.NewSelect([]string{}, func(s string) {

	})

	MyApp.MiddlewareVulnerabilitiesSelectionMenu.SetSelectedIndex(0)

	// 网络设备类
	MyApp.NetworkEquipmentProductSelectionMenu = widget.NewSelect(MyApp.NetworkEquipment.NameInfoExploit(), func(s string) {

	})
	MyApp.NetworkEquipmentProductSelectionMenu.SetSelectedIndex(0)

	MyApp.NetworkEquipmentVulnerabilitiesSelectionMenu = widget.NewSelect([]string{}, func(s string) {

	})

	// 自动化类
	MyApp.AutomationProductSelectionMenu = widget.NewSelect(MyApp.Automation.NameInfoExploit(), func(s string) {

	})

	MyApp.AutomationProductSelectionMenu.SetSelectedIndex(0)

	MyApp.AutomationVulnerabilitiesSelectionMenu = widget.NewSelect([]string{"自动化"}, func(s string) {

	})
	MyApp.AutomationVulnerabilitiesSelectionMenu.SetSelectedIndex(0)

	// 相关
	MyApp.UtilizationModeEntry = widget.NewEntry()
	MyApp.DnsLogAddrEntry = widget.NewEntry()

	// 按钮 统一初始化
	MyApp.ResultExportButton = widget.NewButtonWithIcon("点击此处导出哦...", theme.FileIcon(), func() {
		SaveFile := dialog.NewFileSave(func(closer fyne.URIWriteCloser, err error) {
			if closer == nil {
				return
			}
			f := excelize.NewFile() // 设置单元格的值

			// 设置列宽
			f.SetColWidth("Sheet1", "B", "C", 33)
			f.SetColWidth("Sheet1", "C", "D", 15)
			f.SetColWidth("Sheet1", "F", "G", 18)
			f.SetColWidth("Sheet1", "G", "H", 15)
			f.SetColWidth("Sheet1", "H", "I", 50)

			// 设置表头行高
			f.SetRowHeight("Sheet1", 1, 30)
			// 这里设置表头
			f.SetCellValue("Sheet1", "A1", "序号")
			f.SetCellValue("Sheet1", "B1", "域名")
			f.SetCellValue("Sheet1", "C1", "长度")
			f.SetCellValue("Sheet1", "D1", "服务")
			f.SetCellValue("Sheet1", "E1", "状态")
			f.SetCellValue("Sheet1", "F1", "指纹")
			f.SetCellValue("Sheet1", "G1", "ip")
			f.SetCellValue("Sheet1", "H1", "标题")

			line := 1

			// 循环写入数据
			for _, v := range MyApp.InformationData {
				if v[0] == "序号" {
					continue
				}
				line++
				f.SetCellValue("Sheet1", fmt.Sprintf("A%d", line), v[0])
				f.SetCellValue("Sheet1", fmt.Sprintf("B%d", line), v[1])
				f.SetCellValue("Sheet1", fmt.Sprintf("C%d", line), v[2])
				f.SetCellValue("Sheet1", fmt.Sprintf("D%d", line), v[3])
				f.SetCellValue("Sheet1", fmt.Sprintf("E%d", line), v[4])
				f.SetCellValue("Sheet1", fmt.Sprintf("F%d", line), v[5])
				f.SetCellValue("Sheet1", fmt.Sprintf("G%d", line), v[6])
				f.SetCellValue("Sheet1", fmt.Sprintf("H%d", line), v[7])
			}

			// 保存文件
			if err := f.SaveAs(closer.URI().Path()); err != nil {
				fmt.Println(err)
			}

		}, MyApp.w)

		SaveFile.SetFileName("result.xlsx")
		SaveFile.Resize(fyne.NewSize(1080, 720))
		SaveFile.Show()
	})

	// cms类
	MyApp.CmsStartButton = widget.NewButtonWithIcon("开始POC", theme.MediaPlayIcon(), func() {
		go func() {
			MyApp.CmsStartButton.Disable()
			MyApp.CmsStopButton.Enable()
			MyApp.CmsProgressBarInfinite.Start()
			switch MyApp.CmsProductSelectionMenu.Selected {
			case "ThinkPHP":
				MyApp.Cms.ThinkPHP.Result = make(chan string, 100)
				MyApp.Cms.ThinkPHP.Result <- "ThinkPHP 正在poc...\n"
				MyApp.Cms.ThinkPHP.Url = MyApp.AddrEntry.Text
				MyApp.Cms.ThinkPHP.Thread, _ = strconv.Atoi(MyApp.ThreadEntry.Text)
				MyApp.Cms.ThinkPHP.Timeout, _ = strconv.Atoi(MyApp.TimeOutEntry.Text)
				MyApp.Cms.ThinkPHP.Choose = MyApp.CmsVulnerabilitiesSelectionMenu.Selected
				go func() {
					for result := range MyApp.Cms.ThinkPHP.Result {
						MyApp.TempString += result
						MyApp.CmsResultMultiLineEntry.SetText(MyApp.TempString)
					}
				}()
				MyApp.Cms.ThinkPHP.RunExploit()
				MyApp.CmsStartButton.Enable()
				MyApp.CmsStopButton.Disable()
				MyApp.CmsProgressBarInfinite.Stop()
				close(MyApp.Cms.ThinkPHP.Result)
				MyApp.TempString = ""
				break
			case "WordPress":
				break
			case "EyouCms":
				break
			case "禅道":
				MyApp.Cms.ChanDao.Result = make(chan string, 100)
				MyApp.Cms.ChanDao.Result <- "禅道 正在poc...\n"
				MyApp.Cms.ChanDao.Url = MyApp.AddrEntry.Text
				MyApp.Cms.ChanDao.Thread, _ = strconv.Atoi(MyApp.ThreadEntry.Text)
				MyApp.Cms.ChanDao.Timeout, _ = strconv.Atoi(MyApp.TimeOutEntry.Text)
				MyApp.Cms.ChanDao.Choose = MyApp.CmsVulnerabilitiesSelectionMenu.Selected
				go func() {
					for result := range MyApp.Cms.ChanDao.Result {
						MyApp.TempString += result
						MyApp.CmsResultMultiLineEntry.SetText(MyApp.TempString)
					}
				}()
				MyApp.Cms.ChanDao.RunExploit()
				MyApp.CmsStartButton.Enable()
				MyApp.CmsStopButton.Disable()
				MyApp.CmsProgressBarInfinite.Stop()
				close(MyApp.Cms.ChanDao.Result)
				MyApp.TempString = ""
				break
			}
		}()
	})

	MyApp.CmsStopButton = widget.NewButtonWithIcon("停止POC", theme.MediaStopIcon(), func() {
		MyApp.CmsProgressBarInfinite.Stop()
		MyApp.CmsStopButton.Disable()
		MyApp.CmsStartButton.Enable()
	})

	MyApp.CmsStopButton.Disable()

	// oa类
	MyApp.OAStartButton = widget.NewButton("开始POC", func() {
		go func() {
			MyApp.OAStartButton.Disable()
			MyApp.OAStopButton.Enable()
			switch MyApp.OAProductSelectionMenu.Selected {
			case "通达OA":
				MyApp.OA.TongDa.Result = make(chan string, 100)
				MyApp.OA.TongDa.Result <- "通达OA 正在poc...\n"
				MyApp.OA.TongDa.Url = MyApp.AddrEntry.Text
				MyApp.OA.TongDa.Thread, _ = strconv.Atoi(MyApp.ThreadEntry.Text)
				MyApp.OA.TongDa.Timeout, _ = strconv.Atoi(MyApp.TimeOutEntry.Text)
				MyApp.OA.TongDa.Choose = MyApp.OAVulnerabilitiesSelectionMenu.Selected
				go func() {
					for result := range MyApp.OA.TongDa.Result {
						MyApp.TempString += result
						MyApp.OAResultMultiLineEntry.SetText(MyApp.TempString)
					}
				}()
				MyApp.OA.TongDa.RunExploit()
				MyApp.OAStartButton.Enable()
				MyApp.OAStopButton.Disable()
				MyApp.OAProgressBarInfinite.Stop()
				close(MyApp.OA.TongDa.Result)
				MyApp.TempString = ""
				break

			case "致远OA":
				break

			default:
				break
			}
		}()
	})

	MyApp.OAStopButton = widget.NewButton("停止POC", func() {
		MyApp.OAStartButton.Enable()
		MyApp.OAStopButton.Disable()
	})
	MyApp.OAStopButton.Disable()

	// information类
	MyApp.InformationStartButton = widget.NewButton("开始POC", func() {
		go func() {
			MyApp.InformationProgressBarInfinite.Start()
			MyApp.InformationStopButton.Enable()
			MyApp.InformationStartButton.Disable()
			//// 这里写匿名函数 只是把功能点括起来 方便写和看
			MyApp.Information.Init()
			MyApp.Information.Domain.Url = MyApp.InformationAddrEntry.Text
			MyApp.Information.Domain.Thread, _ = strconv.Atoi(MyApp.ThreadEntry.Text)
			MyApp.Information.Domain.SecurityTrailsApi = MyApp.Information.Config.SecurityTrailsApi
			MyApp.Information.Domain.FofaApiKey = MyApp.Information.Config.FofaApiKey
			MyApp.Information.Domain.FofaMail = MyApp.Information.Config.FofaMail
			MyApp.Information.Domain.ShoDanApiKey = MyApp.Information.Config.ShoDanApiKey
			MyApp.InformationResultChan = make(chan [][]string, 10)
			go func() {
				for domain := range MyApp.InformationResultChan {
					MyApp.InformationData = append(MyApp.InformationData, domain...)
					MyApp.InformationResultTable.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
						template.(*widget.Label).SetText(MyApp.InformationData[id.Row][id.Col])
					}
				}
			}()

			MyApp.Information.RunExploit(MyApp.InformationResultChan)
			close(MyApp.InformationResultChan)
			MyApp.InformationProgressBarInfinite.Stop()
			MyApp.InformationStartButton.Enable()
			MyApp.InformationStopButton.Disable()
		}()
	})

	MyApp.InformationStopButton = widget.NewButton("停止POC", func() {
		go func() {
			MyApp.InformationProgressBarInfinite.Stop()
			MyApp.InformationStopButton.Disable()
			MyApp.InformationStartButton.Enable()
		}()
	})
	MyApp.InformationStopButton.Disable()

	// 中间件类
	MyApp.MiddlewareStartButton = widget.NewButton("开始POC", func() {
		go func() {

			MyApp.MiddlewareStartButton.Disable()
			MyApp.MiddlewareStopButton.Enable()
			switch MyApp.MiddlewareProductSelectionMenu.Selected {
			case "Nginx":
				MyApp.MiddlewareResultMultiLineEntry.SetText("中间件 正在poc...")
				break
			case "Weblogic":
				MyApp.Middleware.Weblogic.Url = MyApp.AddrEntry.Text
				MyApp.Middleware.Weblogic.Timeout, _ = strconv.Atoi(MyApp.TimeOutEntry.Text)
				MyApp.Middleware.Weblogic.Choose = MyApp.MiddlewareVulnerabilitiesSelectionMenu.Selected
				MyApp.Middleware.Weblogic.Result = make(chan string, 10)
				go func() {
					for v := range MyApp.Middleware.Result {
						MyApp.TempString += v
						MyApp.MiddlewareResultMultiLineEntry.SetText(MyApp.TempString)
					}
				}()
				MyApp.Middleware.Weblogic.RunExploit()
				// close(MyApp.Middleware.Weblogic.Result)
				break
			default:
				break
			}
		}()
	})

	MyApp.MiddlewareStopButton = widget.NewButton("停止POC", func() {
		MyApp.MiddlewareStopButton.Disable()
		MyApp.MiddlewareStartButton.Enable()
	})

	MyApp.MiddlewareStopButton.Disable()

	// 网络设备类
	MyApp.NetworkEquipmentStartButton = widget.NewButton("开始POC", func() {
		go func() {
			MyApp.NetworkEquipmentStartButton.Disable()
			MyApp.NetworkEquipmentStopButton.Enable()
			switch MyApp.NetworkEquipmentProductSelectionMenu.Selected {
			case "JCG":
				MyApp.NetworkEquipmentMultiLineEntry.SetText("网络设备 正在poc...")
				break
			default:
				break
			}
		}()
	})

	MyApp.NetworkEquipmentStopButton = widget.NewButton("停止POC", func() {
		MyApp.NetworkEquipmentStopButton.Disable()
		MyApp.NetworkEquipmentStartButton.Enable()
	})

	MyApp.NetworkEquipmentStopButton.Disable()

	// 自动化类
	MyApp.AutomationStartButton = widget.NewButton("开始POC", func() {
		go func() {
			MyApp.AutomationStartButton.Disable()
			MyApp.AutomationStopButton.Enable()
			switch MyApp.AutomationProductSelectionMenu.Selected {
			case "自动化":
				MyApp.AutomationMultiLineEntry.SetText("自动化点火...")
				break
			default:
				break
			}
		}()
	})

	MyApp.AutomationStopButton = widget.NewButton("停止POC", func() {
		MyApp.AutomationStopButton.Disable()
		MyApp.AutomationStartButton.Enable()
	})

	MyApp.AutomationStopButton.Disable()

	// 进度条 统一初始化
	// information类
	MyApp.InformationProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.InformationProgressBarInfinite.Stop()

	// cms类
	MyApp.CmsProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.CmsProgressBarInfinite.Stop()

	// oa类
	MyApp.OAProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.OAProgressBarInfinite.Stop()

	// 中间件类
	MyApp.MiddlewareProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.MiddlewareProgressBarInfinite.Stop()

	// 网络设备类
	MyApp.NetworkEquipmentProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.NetworkEquipmentProgressBarInfinite.Stop()

	// 自动化类
	MyApp.AutomationProgressBarInfinite = widget.NewProgressBarInfinite()
	MyApp.AutomationProgressBarInfinite.Stop()

	// 表格初始化
	MyApp.InformationData = [][]string{
		{"序号", "域名", "长度", "服务", "状态", "指纹", "ip", "标题"},
	}

	MyApp.InformationResultTable = widget.NewTable(nil, nil, nil)
	MyApp.InformationResultTable.Length = func() (int, int) {
		return len(MyApp.InformationData), len(MyApp.InformationData[0])
	}

	MyApp.InformationResultTable.CreateCell = func() fyne.CanvasObject {
		return widget.NewLabel("https://baijia.baidu.com")
	}

	MyApp.InformationResultTable.OnSelected = func(id widget.TableCellID) {
		if strings.HasPrefix(MyApp.InformationData[id.Row][id.Col], "http") {
			cmd := exec.Command("cmd", "/c", fmt.Sprintf("start %s", MyApp.InformationData[id.Row][id.Col]))
			err := cmd.Run()
			if err != nil {
				return
			}
		}
	}

	MyApp.InformationResultTable.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
		template.(*widget.Label).SetText(MyApp.InformationData[id.Row][id.Col])
	}

	MyApp.InformationResultTable.SetColumnWidth(0, 50)  // 序号
	MyApp.InformationResultTable.SetColumnWidth(1, 500) // 域名
	MyApp.InformationResultTable.SetColumnWidth(2, 70)  // 长度
	MyApp.InformationResultTable.SetColumnWidth(3, 180) // 服务
	MyApp.InformationResultTable.SetColumnWidth(4, 50)  // 状态
	MyApp.InformationResultTable.SetColumnWidth(5, 180) // 指纹
	MyApp.InformationResultTable.SetColumnWidth(6, 130) // ip
	MyApp.InformationResultTable.SetColumnWidth(7, 500) // 标题

}

// 信息收集容器定义区域
func (MyApp *App) InformationGathering() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.InformationAddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(layout.NewSpacer(), layout.NewSpacer(), MyApp.InformationStartButton, MyApp.InformationStopButton)

	// 目标检测左边盒子内容
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), widget.NewLabel(""), ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))

	RelevantInformation := widget.NewAccordionItem("相关信息", container.NewMax(MyApp.InformationProgressBarInfinite))

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.InformationResultTable)),
		container.NewTabItem("结果导出", container.NewCenter(MyApp.ResultExportButton)),
		container.NewTabItem("布局线", container.NewMax(MyApp.InformationResultMultiLineEntry)),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

// CMS系列容器定义区域
func (MyApp *App) CmsSeries() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.AddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	ColorSupportProductsLabel := canvas.NewText("支持产品:", color.RGBA{0, 0, 255, 0})        // 支持产品文本 蓝色
	ColorSpecifiedVulnerabilityLabel := canvas.NewText("指定漏洞:", color.RGBA{0, 128, 0, 0}) // 指定漏洞文本 绿色

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(ColorSpecifiedVulnerabilityLabel, MyApp.CmsVulnerabilitiesSelectionMenu, MyApp.CmsStartButton, MyApp.CmsStopButton)

	// 目标检测左边盒子内容
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), MyApp.CmsProductSelectionMenu, ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), ColorSupportProductsLabel, ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	// 功能间隔符 -------------------------------------------------------------------------------------------------------
	UtilizationModeLabel := canvas.NewText("\t利用方式", color.RGBA{0, 255, 255, 0}) // 利用方式文本 青色
	DnsLogAddrLabel := canvas.NewText("\tDNS地址", color.RGBA{75, 0, 130, 0})      // DNS地址文本 紫色

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))
	ContainerRelevantInformation := container.NewGridWrap(fyne.NewSize(120, 38), UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry, layout.NewSpacer(), layout.NewSpacer(), MyApp.CmsProgressBarInfinite)

	RelevantInformation := widget.NewAccordionItem("相关信息", ContainerRelevantInformation)

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.CmsResultMultiLineEntry)),
		container.NewTabItem("命令执行", widget.NewLabel("")),
		container.NewTabItem("反序列化", widget.NewLabel("")),
		container.NewTabItem("内存马", widget.NewLabel("")),
		container.NewTabItem("JNDI-Exploit", widget.NewLabel("")),
		container.NewTabItem("文件上传", widget.NewLabel("")),
		container.NewTabItem("漏洞使用 md", widget.NewLabel("")),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

// OA系列容器定义区域
func (MyApp *App) OASeries() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.AddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	ColorSupportProductsLabel := canvas.NewText("支持产品:", color.RGBA{0, 0, 255, 0})        // 支持产品文本 蓝色
	ColorSpecifiedVulnerabilityLabel := canvas.NewText("指定漏洞:", color.RGBA{0, 128, 0, 0}) // 指定漏洞文本 绿色

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(ColorSpecifiedVulnerabilityLabel, MyApp.OAVulnerabilitiesSelectionMenu, MyApp.OAStartButton, MyApp.OAStopButton)

	// 目标检测左边盒子内容哟段
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), MyApp.OAProductSelectionMenu, ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), ColorSupportProductsLabel, ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	// 功能间隔符 -------------------------------------------------------------------------------------------------------
	UtilizationModeLabel := canvas.NewText("\t利用方式", color.RGBA{0, 255, 255, 0}) // 利用方式文本 青色
	DnsLogAddrLabel := canvas.NewText("\tDNS地址", color.RGBA{75, 0, 130, 0})      // DNS地址文本 紫色

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))
	ContainerRelevantInformation := container.NewGridWrap(fyne.NewSize(120, 38), UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry, layout.NewSpacer(), layout.NewSpacer(), MyApp.OAProgressBarInfinite)

	RelevantInformation := widget.NewAccordionItem("相关信息", ContainerRelevantInformation)

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.OAResultMultiLineEntry)),
		container.NewTabItem("命令执行", widget.NewLabel("")),
		container.NewTabItem("反序列化", widget.NewLabel("")),
		container.NewTabItem("内存马", widget.NewLabel("")),
		container.NewTabItem("JNDI-Exploit", widget.NewLabel("")),
		container.NewTabItem("文件上传", widget.NewLabel("")),
		container.NewTabItem("漏洞使用 md", widget.NewLabel("")),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

// 中间件
func (MyApp *App) ContainerMiddleware() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.AddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	ColorSupportProductsLabel := canvas.NewText("支持产品:", color.RGBA{0, 0, 255, 0})        // 支持产品文本 蓝色
	ColorSpecifiedVulnerabilityLabel := canvas.NewText("指定漏洞:", color.RGBA{0, 128, 0, 0}) // 指定漏洞文本 绿色

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(ColorSpecifiedVulnerabilityLabel, MyApp.MiddlewareVulnerabilitiesSelectionMenu, MyApp.MiddlewareStartButton, MyApp.MiddlewareStopButton)

	// 目标检测左边盒子内容
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), MyApp.MiddlewareProductSelectionMenu, ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), ColorSupportProductsLabel, ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	// 功能间隔符 -------------------------------------------------------------------------------------------------------
	UtilizationModeLabel := canvas.NewText("\t利用方式", color.RGBA{0, 255, 255, 0}) // 利用方式文本 青色
	DnsLogAddrLabel := canvas.NewText("\tDNS地址", color.RGBA{75, 0, 130, 0})      // DNS地址文本 紫色

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))
	ContainerRelevantInformation := container.NewGridWrap(fyne.NewSize(120, 38), UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry, layout.NewSpacer(), layout.NewSpacer(), MyApp.CmsProgressBarInfinite)

	RelevantInformation := widget.NewAccordionItem("相关信息", ContainerRelevantInformation)

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.MiddlewareResultMultiLineEntry)),
		container.NewTabItem("命令执行", widget.NewLabel("")),
		container.NewTabItem("反序列化", widget.NewLabel("")),
		container.NewTabItem("内存马", widget.NewLabel("")),
		container.NewTabItem("JNDI-Exploit", widget.NewLabel("")),
		container.NewTabItem("文件上传", widget.NewLabel("")),
		container.NewTabItem("漏洞使用 md", widget.NewLabel("")),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

// 网络设备
func (MyApp *App) ContainerNetworkEquipment() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.AddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	ColorSupportProductsLabel := canvas.NewText("支持产品:", color.RGBA{0, 0, 255, 0})        // 支持产品文本 蓝色
	ColorSpecifiedVulnerabilityLabel := canvas.NewText("指定漏洞:", color.RGBA{0, 128, 0, 0}) // 指定漏洞文本 绿色

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(ColorSpecifiedVulnerabilityLabel, MyApp.NetworkEquipmentVulnerabilitiesSelectionMenu, MyApp.NetworkEquipmentStartButton, MyApp.NetworkEquipmentStopButton)

	// 目标检测左边盒子内容
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), MyApp.NetworkEquipmentProductSelectionMenu, ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), ColorSupportProductsLabel, ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	// 功能间隔符 -------------------------------------------------------------------------------------------------------
	UtilizationModeLabel := canvas.NewText("\t利用方式", color.RGBA{0, 255, 255, 0}) // 利用方式文本 青色
	DnsLogAddrLabel := canvas.NewText("\tDNS地址", color.RGBA{75, 0, 130, 0})      // DNS地址文本 紫色

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))
	ContainerRelevantInformation := container.NewGridWrap(fyne.NewSize(120, 38), UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry, layout.NewSpacer(), layout.NewSpacer(), MyApp.NetworkEquipmentProgressBarInfinite)

	RelevantInformation := widget.NewAccordionItem("相关信息", ContainerRelevantInformation)

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.NetworkEquipmentMultiLineEntry)),
		container.NewTabItem("命令执行", widget.NewLabel("")),
		container.NewTabItem("反序列化", widget.NewLabel("")),
		container.NewTabItem("内存马", widget.NewLabel("")),
		container.NewTabItem("JNDI-Exploit", widget.NewLabel("")),
		container.NewTabItem("文件上传", widget.NewLabel("")),
		container.NewTabItem("漏洞使用 md", widget.NewLabel("")),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

// 自动化
func (MyApp *App) ContainerAutomation() *fyne.Container {
	ColorAddrLabel := canvas.NewText("目标地址:", color.RGBA{255, 0, 0, 0})       // 目标地址文本 红色
	ColorThreadLabel := canvas.NewText("线程设置:", color.RGBA{255, 0, 255, 0})   // 线程文本 绿色
	ColorTimeOutLabel := canvas.NewText("超时设置:", color.RGBA{255, 255, 0., 0}) // 超时文本 绿色

	// 目标检测右边盒子内容
	ContainerDetectionRightBox := container.NewHBox(ColorThreadLabel, MyApp.ThreadEntry, ColorTimeOutLabel, MyApp.TimeOutEntry)

	// 目标检测左边盒子内容
	ContainerDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerDetectionRightBox), ContainerDetectionRightBox, MyApp.AddrEntry)

	// 检测目标最终容器
	ContainerDetectionTarget := container.New(layout.NewFormLayout(), ColorAddrLabel, ContainerDetectionLeftBox)

	DetectionTarget := widget.NewAccordionItem("检测目标", ContainerDetectionTarget)
	// 功能间隔符 -------------------------------------------------------------------------------------------------------

	ColorSupportProductsLabel := canvas.NewText("支持产品:", color.RGBA{0, 0, 255, 0})        // 支持产品文本 蓝色
	ColorSpecifiedVulnerabilityLabel := canvas.NewText("指定漏洞:", color.RGBA{0, 128, 0, 0}) // 指定漏洞文本 绿色

	// 目标检测右边盒子内容

	ContainerVulnerabilityDetectionRightBox := container.NewHBox(ColorSpecifiedVulnerabilityLabel, MyApp.AutomationVulnerabilitiesSelectionMenu, MyApp.AutomationStartButton, MyApp.AutomationStopButton)

	// 目标检测左边盒子内容
	ContainerVulnerabilityDetectionLeftBox := container.New(layout.NewBorderLayout(nil, nil, nil, ContainerVulnerabilityDetectionRightBox), MyApp.AutomationProductSelectionMenu, ContainerVulnerabilityDetectionRightBox)

	// 检测目标最终容器
	ContainerVulnerabilityDetection := container.New(layout.NewFormLayout(), ColorSupportProductsLabel, ContainerVulnerabilityDetectionLeftBox)
	VulnerabilityDetection := widget.NewAccordionItem("漏洞检测", ContainerVulnerabilityDetection)

	// 功能间隔符 -------------------------------------------------------------------------------------------------------
	UtilizationModeLabel := canvas.NewText("\t利用方式", color.RGBA{0, 255, 255, 0}) // 利用方式文本 青色
	DnsLogAddrLabel := canvas.NewText("\tDNS地址", color.RGBA{75, 0, 130, 0})      // DNS地址文本 紫色

	//ContainerRelevantInformation := container.New(layout.NewGridLayoutWithColumns(2), container.NewVBox(UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry))
	ContainerRelevantInformation := container.NewGridWrap(fyne.NewSize(120, 38), UtilizationModeLabel, MyApp.UtilizationModeEntry, DnsLogAddrLabel, MyApp.DnsLogAddrEntry, layout.NewSpacer(), layout.NewSpacer(), MyApp.AutomationProgressBarInfinite)

	RelevantInformation := widget.NewAccordionItem("相关信息", ContainerRelevantInformation)

	accordion := widget.NewAccordion(DetectionTarget, VulnerabilityDetection, RelevantInformation)
	accordion.MultiOpen = true
	accordion.Items[0].Open = true
	accordion.Items[1].Open = true
	accordion.Items[2].Open = true

	tabs := container.NewAppTabs(
		container.NewTabItem("检测日志", container.NewMax(MyApp.AutomationMultiLineEntry)),
		container.NewTabItem("命令执行", widget.NewLabel("")),
		container.NewTabItem("反序列化", widget.NewLabel("")),
		container.NewTabItem("内存马", widget.NewLabel("")),
		container.NewTabItem("JNDI-Exploit", widget.NewLabel("")),
		container.NewTabItem("文件上传", widget.NewLabel("")),
		container.NewTabItem("漏洞使用 md", widget.NewLabel("")),
	)

	return container.NewVBox(accordion, widget.NewSeparator(), tabs)
}

func (MyApp *App) WebShell() *fyne.Container {
	return container.NewMax()
}

// 漏洞查询
func (MyApp *App) VulnerabilityQuery() *fyne.Container {
	return container.NewMax()
}

// 编码解码定义区域
func (MyApp *App) Crypto() *fyne.Container {
	return container.NewMax()
}

// shell终端定义区域
func (MyApp *App) GoShell() *fyne.Container {
	t := terminal.New()
	go func() {
		_ = t.RunLocalShell()
		MyApp.a.Quit()
	}()

	return container.NewMax(t)
}

// 定义漏洞利用AppTabs区域
func (MyApp *App) ReturnExploitAppTabs() *container.AppTabs {
	tabs := container.NewAppTabs(
		container.NewTabItem("信息收集", MyApp.InformationGathering()),
		container.NewTabItem("CMS系列", MyApp.CmsSeries()),
		container.NewTabItem("OA系列", MyApp.OASeries()),
		container.NewTabItem("中间件", MyApp.ContainerMiddleware()),
		container.NewTabItem("网络设备", MyApp.ContainerNetworkEquipment()),
		container.NewTabItem("自动化", MyApp.ContainerAutomation()),
		container.NewTabItem("WebShell", MyApp.WebShell()),
		container.NewTabItem("漏洞速查", MyApp.VulnerabilityQuery()),
		container.NewTabItem("编码解码", MyApp.Crypto()),
		container.NewTabItem("ChatGPT", widget.NewLabel("")),
		container.NewTabItem("shell终端", MyApp.GoShell()),
		container.NewTabItem(" \t布局线 \t", canvas.NewText("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t它应该做点什么\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", color.RGBA{0, 255, 0, 255})),
	)

	tabs.SetTabLocation(container.TabLocationLeading)
	return tabs
}

// 运行Gui
func (MyApp *App) ShowGui() {
	MyApp.System.CheckAdministrator()
	// MyApp.System.CheckSystem()

	defer func() {
		MyApp.Sound.SayHello()
		MyApp.Sound.SayOffline()
	}()

	MyApp.a = app.NewWithID("ExploitToolsGo.fyne.io")
	MyApp.a.Settings().SetTheme(customTheme{"Dark"})
	// MyApp.a.Settings().SetTheme(theme.DarkTheme())
	MyApp.w = MyApp.a.NewWindow("ExploitToolsGo 综合型exp利用工具 By中二 One-Fox安全团队出品")

	go func() {
		MyApp.Sound.SayHello()
		MyApp.Sound.SayLogin()
	}()

	// 初始化基本控件
	MyApp.Init()
	MyApp.w.SetMainMenu(MyApp.ReturnSetMainMenu())
	MyApp.w.SetContent(MyApp.ReturnExploitAppTabs())
	// MyApp.w.SetContent(container.NewMax(MyApp.ReturnResourceImage(), MyApp.ReturnExploitAppTabs()))
	MyApp.w.SetMaster()
	MyApp.w.CenterOnScreen()

	MyApp.w.Resize(fyne.NewSize(1080, 720))
	MyApp.w.ShowAndRun()
}
