package finger

import (
	"encoding/json"
	"github.com/gookit/color"
	"goexploits/Information/queue"
	"net"
	"os"
	"strconv"
	"strings"
	"sync"
)

type Outrestul struct {
	Url        string `json:"url"`
	Cms        string `json:"cms"`
	Server     string `json:"server"`
	Statuscode int    `json:"statuscode"`
	Length     int    `json:"length"`
	Title      string `json:"title"`
}

type FinScan struct {
	UrlQueue *queue.Queue
	Ch       chan []string
	Wg       sync.WaitGroup
	Thread   int
	Output   string
	Proxy    string
	// AllResult   []Outrestul
	// FocusResult []Outrestul
	Finpx  *Packjson
	Result chan [][]string
	Index  int
}

func NewScan(urls []string, thread int, output string, proxy string) *FinScan {
	s := &FinScan{
		UrlQueue: queue.NewQueue(),
		Ch:       make(chan []string, thread),
		Result:   make(chan [][]string, thread),
		Wg:       sync.WaitGroup{},
		Thread:   thread,
		Output:   output,
		Proxy:    proxy,
		//AllResult:   []Outrestul{},
		//FocusResult: []Outrestul{},
	}

	// err := LoadWebfingerprint(source.GetCurrentAbPathByExecutable() + "/finger.json")
	err := LoadWebfingerprint()
	if err != nil {
		color.RGBStyleFromString("237,64,35").Println("[error] fingerprint file error!!!")
		os.Exit(1)
	}
	s.Finpx = GetWebfingerprint()
	for _, url := range urls {
		s.UrlQueue.Push([]string{url, "0"})
	}
	return s
}

func (s *FinScan) StartScan(InformationResultChan chan [][]string) {
	for i := 0; i <= s.Thread; i++ {
		s.Wg.Add(1)
		go func() {
			defer s.Wg.Done()
			s.fingerScan(InformationResultChan)
		}()
	}
	s.Wg.Wait()
}

func MapToJson(param map[string][]string) string {
	dataType, _ := json.Marshal(param)
	dataString := string(dataType)
	return dataString
}

func RemoveDuplicatesAndEmpty(a []string) (ret []string) {
	a_len := len(a)
	for i := 0; i < a_len; i++ {
		if (i > 0 && a[i-1] == a[i]) || len(a[i]) == 0 {
			continue
		}
		ret = append(ret, a[i])
	}
	return
}

func (s *FinScan) fingerScan(InformationResultChan chan [][]string) {
	for s.UrlQueue.Len() != 0 {
		dataface := s.UrlQueue.Pop()
		switch dataface.(type) {
		case []string:
			url := dataface.([]string)
			var data *resps
			data, err := httprequest(url, s.Proxy)
			if err != nil {
				url[0] = strings.ReplaceAll(url[0], "https://", "http://")
				data, err = httprequest(url, s.Proxy)
				if err != nil {
					continue
				}
			}
			for _, jurl := range data.jsurl {
				if jurl != "" {
					s.UrlQueue.Push([]string{jurl, "1"})
				}
			}
			headers := MapToJson(data.header)
			var cms []string
			for _, finp := range s.Finpx.Fingerprint {
				if finp.Location == "body" {
					if finp.Method == "keyword" {
						if iskeyword(data.body, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
					if finp.Method == "faviconhash" {
						if data.favhash == finp.Keyword[0] {
							cms = append(cms, finp.Cms)
						}
					}
					if finp.Method == "regular" {
						if isregular(data.body, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
				}
				if finp.Location == "header" {
					if finp.Method == "keyword" {
						if iskeyword(headers, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
					if finp.Method == "regular" {
						if isregular(headers, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
				}
				if finp.Location == "title" {
					if finp.Method == "keyword" {
						if iskeyword(data.title, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
					if finp.Method == "regular" {
						if isregular(data.title, finp.Keyword) {
							cms = append(cms, finp.Cms)
						}
					}
				}
			}
			cms = RemoveDuplicatesAndEmpty(cms)
			cmss := strings.Join(cms, ",")

			ip := strings.ReplaceAll(data.url, "https://", "")
			ip = strings.ReplaceAll(ip, "http://", "")

			iprecords, _ := net.LookupIP(ip)

			for _, ip := range iprecords {
				s.Index += 1
				if ip.To4().String() != "<nil>" {
					InformationResultChan <- [][]string{{strconv.Itoa(s.Index), data.url, strconv.Itoa(data.length), data.server, strconv.Itoa(data.statuscode), cmss, ip.To4().String(), data.title}}
					break
				} else {
					InformationResultChan <- [][]string{{strconv.Itoa(s.Index), data.url, strconv.Itoa(data.length), data.server, strconv.Itoa(data.statuscode), cmss, "ipv6", data.title}}
					break
				}
			}

		default:
			continue
		}
	}
}
